#include <bits/stdc++.h>
using namespace std;
using ll = long long;

const int N = 1e6 + 10, A = 31;
int to[N * A][2], cnt[N * A], tot = 1;

// Insert a number into the binary trie
void add(ll n) {
    ll u = 1;
    cnt[u]++;
    for (ll i = A - 1; i >= 0; i--) {
        ll bit = (n >> i) & 1;
        if (!to[u][bit]) to[u][bit] = ++tot;
        u = to[u][bit];
        cnt[u]++;
    }
}

// Count numbers in trie with XOR â‰¥ x
ll get(ll x, ll t) {
    ll sum = 0, u = 1, xo = 0;
    for (ll i = A - 1; i >= 0; i--) {
        ll bit = (t >> i) & 1;
        if (xo + (1 << i) >= x) { 
            sum += cnt[to[u][!bit]];
            u = to[u][bit];
        } else {
            if (!to[u][!bit]) return sum;
            u = to[u][!bit];
            xo += (1 << i);
        }
    }
    return sum + (xo >= x ? cnt[u] : 0);
}

// Solve function using prefix XOR and trie
void solve() {
    ll n, x, s = 0, ans = 0;
    cin >> n >> x;
    add(0);
    for (ll i = 0; i < n; i++) {
        ll q;
        cin >> q;
        s ^= q;  // Update prefix XOR
        add(s);  // Insert into trie
        ans += get(x, s);  // Count valid subarrays
    }
    cout << ans << endl;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    int t;
    cin >> t;
    while (t--) solve();
    return 0;
}
